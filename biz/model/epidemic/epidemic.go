// Code generated by thriftgo (0.3.19). DO NOT EDIT.

package epidemic

import (
	"Hospital/biz/model/model"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type AddEpidemicCaseRequest struct {
	// 病例ID，唯一标识
	CaseID int64 `thrift:"case_id,1,required" form:"case_id,required" json:"case_id,required" query:"case_id,required"`
	// 患者ID
	PatientID int64 `thrift:"patient_id,2,required" form:"patient_id,required" json:"patient_id,required" query:"patient_id,required"`
	// 病发日期（格式：YYYY-MM-DD）
	OnsetDate int64 `thrift:"onset_date,3,required" form:"onset_date,required" json:"onset_date,required" query:"onset_date,required"`
	// 诊断日期（格式：YYYY-MM-DD）
	DiagnosisDate int64 `thrift:"diagnosis_date,4,required" form:"diagnosis_date,required" json:"diagnosis_date,required" query:"diagnosis_date,required"`
	// 病例类型：confirmed/suspected/asymptomatic
	CaseType string `thrift:"case_type,5,required" form:"case_type,required" json:"case_type,required" query:"case_type,required"`
	// 感染来源：local/imported/unknown
	InfectionSource string `thrift:"infection_source,6,required" form:"infection_source,required" json:"infection_source,required" query:"infection_source,required"`
	// 传播途径：逗号分隔的字符串如"droplet,contact"
	TransmissionRoute string `thrift:"transmission_route,7,required" form:"transmission_route,required" json:"transmission_route,required" query:"transmission_route,required"`
	// 症状信息
	Symptoms string `thrift:"symptoms,8,required" form:"symptoms,required" json:"symptoms,required" query:"symptoms,required"`
	// 旅行史
	TravelHistory string `thrift:"travel_history,9,required" form:"travel_history,required" json:"travel_history,required" query:"travel_history,required"`
	// 高危地点
	RiskLocations string `thrift:"risk_locations,10,required" form:"risk_locations,required" json:"risk_locations,required" query:"risk_locations,required"`
	// 密接人数（smallint 对应 i16）
	CloseContacts int64 `thrift:"close_contacts,11,required" form:"close_contacts,required" json:"close_contacts,required" query:"close_contacts,required"`
}

func NewAddEpidemicCaseRequest() *AddEpidemicCaseRequest {
	return &AddEpidemicCaseRequest{}
}

func (p *AddEpidemicCaseRequest) InitDefault() {
}

func (p *AddEpidemicCaseRequest) GetCaseID() (v int64) {
	return p.CaseID
}

func (p *AddEpidemicCaseRequest) GetPatientID() (v int64) {
	return p.PatientID
}

func (p *AddEpidemicCaseRequest) GetOnsetDate() (v int64) {
	return p.OnsetDate
}

func (p *AddEpidemicCaseRequest) GetDiagnosisDate() (v int64) {
	return p.DiagnosisDate
}

func (p *AddEpidemicCaseRequest) GetCaseType() (v string) {
	return p.CaseType
}

func (p *AddEpidemicCaseRequest) GetInfectionSource() (v string) {
	return p.InfectionSource
}

func (p *AddEpidemicCaseRequest) GetTransmissionRoute() (v string) {
	return p.TransmissionRoute
}

func (p *AddEpidemicCaseRequest) GetSymptoms() (v string) {
	return p.Symptoms
}

func (p *AddEpidemicCaseRequest) GetTravelHistory() (v string) {
	return p.TravelHistory
}

func (p *AddEpidemicCaseRequest) GetRiskLocations() (v string) {
	return p.RiskLocations
}

func (p *AddEpidemicCaseRequest) GetCloseContacts() (v int64) {
	return p.CloseContacts
}

var fieldIDToName_AddEpidemicCaseRequest = map[int16]string{
	1:  "case_id",
	2:  "patient_id",
	3:  "onset_date",
	4:  "diagnosis_date",
	5:  "case_type",
	6:  "infection_source",
	7:  "transmission_route",
	8:  "symptoms",
	9:  "travel_history",
	10: "risk_locations",
	11: "close_contacts",
}

func (p *AddEpidemicCaseRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCaseID bool = false
	var issetPatientID bool = false
	var issetOnsetDate bool = false
	var issetDiagnosisDate bool = false
	var issetCaseType bool = false
	var issetInfectionSource bool = false
	var issetTransmissionRoute bool = false
	var issetSymptoms bool = false
	var issetTravelHistory bool = false
	var issetRiskLocations bool = false
	var issetCloseContacts bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCaseID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPatientID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOnsetDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDiagnosisDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCaseType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetInfectionSource = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransmissionRoute = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSymptoms = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetTravelHistory = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetRiskLocations = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetCloseContacts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCaseID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPatientID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOnsetDate {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDiagnosisDate {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCaseType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetInfectionSource {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTransmissionRoute {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSymptoms {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetTravelHistory {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetRiskLocations {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetCloseContacts {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddEpidemicCaseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddEpidemicCaseRequest[fieldId]))
}

func (p *AddEpidemicCaseRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CaseID = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PatientID = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OnsetDate = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DiagnosisDate = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CaseType = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InfectionSource = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransmissionRoute = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Symptoms = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TravelHistory = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RiskLocations = _field
	return nil
}
func (p *AddEpidemicCaseRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CloseContacts = _field
	return nil
}

func (p *AddEpidemicCaseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEpidemicCaseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddEpidemicCaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("case_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CaseID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("patient_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PatientID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("onset_date", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OnsetDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("diagnosis_date", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DiagnosisDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("case_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CaseType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("infection_source", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InfectionSource); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transmission_route", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransmissionRoute); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("symptoms", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Symptoms); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("travel_history", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TravelHistory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("risk_locations", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RiskLocations); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *AddEpidemicCaseRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("close_contacts", thrift.I64, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CloseContacts); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *AddEpidemicCaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddEpidemicCaseRequest(%+v)", *p)

}

type AddEpidemicCaseResponse struct {
	Base *model.BaseResp `thrift:"base,1" form:"base" json:"base" query:"base"`
}

func NewAddEpidemicCaseResponse() *AddEpidemicCaseResponse {
	return &AddEpidemicCaseResponse{}
}

func (p *AddEpidemicCaseResponse) InitDefault() {
}

var AddEpidemicCaseResponse_Base_DEFAULT *model.BaseResp

func (p *AddEpidemicCaseResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddEpidemicCaseResponse_Base_DEFAULT
	}
	return p.Base
}

var fieldIDToName_AddEpidemicCaseResponse = map[int16]string{
	1: "base",
}

func (p *AddEpidemicCaseResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddEpidemicCaseResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddEpidemicCaseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddEpidemicCaseResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *AddEpidemicCaseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEpidemicCaseResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddEpidemicCaseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddEpidemicCaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddEpidemicCaseResponse(%+v)", *p)

}

type QueryEpidemicCaseByIdRequest struct {
	// 病例ID，唯一标识
	CaseID int64 `thrift:"case_id,1,required" form:"case_id,required" json:"case_id,required" query:"case_id,required"`
}

func NewQueryEpidemicCaseByIdRequest() *QueryEpidemicCaseByIdRequest {
	return &QueryEpidemicCaseByIdRequest{}
}

func (p *QueryEpidemicCaseByIdRequest) InitDefault() {
}

func (p *QueryEpidemicCaseByIdRequest) GetCaseID() (v int64) {
	return p.CaseID
}

var fieldIDToName_QueryEpidemicCaseByIdRequest = map[int16]string{
	1: "case_id",
}

func (p *QueryEpidemicCaseByIdRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCaseID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCaseID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCaseID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEpidemicCaseByIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEpidemicCaseByIdRequest[fieldId]))
}

func (p *QueryEpidemicCaseByIdRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CaseID = _field
	return nil
}

func (p *QueryEpidemicCaseByIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("case_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CaseID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEpidemicCaseByIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEpidemicCaseByIdRequest(%+v)", *p)

}

type QueryEpidemicCaseByIdResponse struct {
	Base *model.BaseResp     `thrift:"base,1" form:"base" json:"base" query:"base"`
	Data *model.EpidemicCase `thrift:"data,2" form:"data" json:"data" query:"data"`
}

func NewQueryEpidemicCaseByIdResponse() *QueryEpidemicCaseByIdResponse {
	return &QueryEpidemicCaseByIdResponse{}
}

func (p *QueryEpidemicCaseByIdResponse) InitDefault() {
}

var QueryEpidemicCaseByIdResponse_Base_DEFAULT *model.BaseResp

func (p *QueryEpidemicCaseByIdResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return QueryEpidemicCaseByIdResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryEpidemicCaseByIdResponse_Data_DEFAULT *model.EpidemicCase

func (p *QueryEpidemicCaseByIdResponse) GetData() (v *model.EpidemicCase) {
	if !p.IsSetData() {
		return QueryEpidemicCaseByIdResponse_Data_DEFAULT
	}
	return p.Data
}

var fieldIDToName_QueryEpidemicCaseByIdResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *QueryEpidemicCaseByIdResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryEpidemicCaseByIdResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryEpidemicCaseByIdResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEpidemicCaseByIdResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByIdResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *QueryEpidemicCaseByIdResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewEpidemicCase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}

func (p *QueryEpidemicCaseByIdResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByIdResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *QueryEpidemicCaseByIdResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEpidemicCaseByIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEpidemicCaseByIdResponse(%+v)", *p)

}

type QueryEpidemicCaseByPatientRequest struct {
	// 患者ID
	PatientID int64 `thrift:"patient_id,1,required" form:"patient_id,required" json:"patient_id,required" query:"patient_id,required"`
}

func NewQueryEpidemicCaseByPatientRequest() *QueryEpidemicCaseByPatientRequest {
	return &QueryEpidemicCaseByPatientRequest{}
}

func (p *QueryEpidemicCaseByPatientRequest) InitDefault() {
}

func (p *QueryEpidemicCaseByPatientRequest) GetPatientID() (v int64) {
	return p.PatientID
}

var fieldIDToName_QueryEpidemicCaseByPatientRequest = map[int16]string{
	1: "patient_id",
}

func (p *QueryEpidemicCaseByPatientRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPatientID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPatientID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPatientID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEpidemicCaseByPatientRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEpidemicCaseByPatientRequest[fieldId]))
}

func (p *QueryEpidemicCaseByPatientRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PatientID = _field
	return nil
}

func (p *QueryEpidemicCaseByPatientRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByPatientRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByPatientRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("patient_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PatientID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEpidemicCaseByPatientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEpidemicCaseByPatientRequest(%+v)", *p)

}

type QueryEpidemicCaseByPatientResponse struct {
	Base *model.BaseResp         `thrift:"base,1" form:"base" json:"base" query:"base"`
	Data *model.EpidemicCaseList `thrift:"data,2" form:"data" json:"data" query:"data"`
}

func NewQueryEpidemicCaseByPatientResponse() *QueryEpidemicCaseByPatientResponse {
	return &QueryEpidemicCaseByPatientResponse{}
}

func (p *QueryEpidemicCaseByPatientResponse) InitDefault() {
}

var QueryEpidemicCaseByPatientResponse_Base_DEFAULT *model.BaseResp

func (p *QueryEpidemicCaseByPatientResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return QueryEpidemicCaseByPatientResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryEpidemicCaseByPatientResponse_Data_DEFAULT *model.EpidemicCaseList

func (p *QueryEpidemicCaseByPatientResponse) GetData() (v *model.EpidemicCaseList) {
	if !p.IsSetData() {
		return QueryEpidemicCaseByPatientResponse_Data_DEFAULT
	}
	return p.Data
}

var fieldIDToName_QueryEpidemicCaseByPatientResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *QueryEpidemicCaseByPatientResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryEpidemicCaseByPatientResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryEpidemicCaseByPatientResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEpidemicCaseByPatientResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByPatientResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *QueryEpidemicCaseByPatientResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewEpidemicCaseList()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}

func (p *QueryEpidemicCaseByPatientResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByPatientResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEpidemicCaseByPatientResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *QueryEpidemicCaseByPatientResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEpidemicCaseByPatientResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEpidemicCaseByPatientResponse(%+v)", *p)

}

type EpidemicService interface {
	AddEpidemicCase(ctx context.Context, req *AddEpidemicCaseRequest) (r *AddEpidemicCaseResponse, err error)

	QueryEpidemicCaseById(ctx context.Context, req *QueryEpidemicCaseByIdRequest) (r *QueryEpidemicCaseByIdResponse, err error)

	QueryEpidemicCaseByPatient(ctx context.Context, req *QueryEpidemicCaseByPatientRequest) (r *QueryEpidemicCaseByPatientResponse, err error)
}

type EpidemicServiceClient struct {
	c thrift.TClient
}

func NewEpidemicServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EpidemicServiceClient {
	return &EpidemicServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEpidemicServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EpidemicServiceClient {
	return &EpidemicServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEpidemicServiceClient(c thrift.TClient) *EpidemicServiceClient {
	return &EpidemicServiceClient{
		c: c,
	}
}

func (p *EpidemicServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EpidemicServiceClient) AddEpidemicCase(ctx context.Context, req *AddEpidemicCaseRequest) (r *AddEpidemicCaseResponse, err error) {
	var _args EpidemicServiceAddEpidemicCaseArgs
	_args.Req = req
	var _result EpidemicServiceAddEpidemicCaseResult
	if err = p.Client_().Call(ctx, "AddEpidemicCase", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemicServiceClient) QueryEpidemicCaseById(ctx context.Context, req *QueryEpidemicCaseByIdRequest) (r *QueryEpidemicCaseByIdResponse, err error) {
	var _args EpidemicServiceQueryEpidemicCaseByIdArgs
	_args.Req = req
	var _result EpidemicServiceQueryEpidemicCaseByIdResult
	if err = p.Client_().Call(ctx, "QueryEpidemicCaseById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemicServiceClient) QueryEpidemicCaseByPatient(ctx context.Context, req *QueryEpidemicCaseByPatientRequest) (r *QueryEpidemicCaseByPatientResponse, err error) {
	var _args EpidemicServiceQueryEpidemicCaseByPatientArgs
	_args.Req = req
	var _result EpidemicServiceQueryEpidemicCaseByPatientResult
	if err = p.Client_().Call(ctx, "QueryEpidemicCaseByPatient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EpidemicServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EpidemicService
}

func (p *EpidemicServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EpidemicServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EpidemicServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEpidemicServiceProcessor(handler EpidemicService) *EpidemicServiceProcessor {
	self := &EpidemicServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AddEpidemicCase", &epidemicServiceProcessorAddEpidemicCase{handler: handler})
	self.AddToProcessorMap("QueryEpidemicCaseById", &epidemicServiceProcessorQueryEpidemicCaseById{handler: handler})
	self.AddToProcessorMap("QueryEpidemicCaseByPatient", &epidemicServiceProcessorQueryEpidemicCaseByPatient{handler: handler})
	return self
}
func (p *EpidemicServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type epidemicServiceProcessorAddEpidemicCase struct {
	handler EpidemicService
}

func (p *epidemicServiceProcessorAddEpidemicCase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemicServiceAddEpidemicCaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddEpidemicCase", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemicServiceAddEpidemicCaseResult{}
	var retval *AddEpidemicCaseResponse
	if retval, err2 = p.handler.AddEpidemicCase(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddEpidemicCase: "+err2.Error())
		oprot.WriteMessageBegin("AddEpidemicCase", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddEpidemicCase", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemicServiceProcessorQueryEpidemicCaseById struct {
	handler EpidemicService
}

func (p *epidemicServiceProcessorQueryEpidemicCaseById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemicServiceQueryEpidemicCaseByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryEpidemicCaseById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemicServiceQueryEpidemicCaseByIdResult{}
	var retval *QueryEpidemicCaseByIdResponse
	if retval, err2 = p.handler.QueryEpidemicCaseById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryEpidemicCaseById: "+err2.Error())
		oprot.WriteMessageBegin("QueryEpidemicCaseById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryEpidemicCaseById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemicServiceProcessorQueryEpidemicCaseByPatient struct {
	handler EpidemicService
}

func (p *epidemicServiceProcessorQueryEpidemicCaseByPatient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemicServiceQueryEpidemicCaseByPatientArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryEpidemicCaseByPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemicServiceQueryEpidemicCaseByPatientResult{}
	var retval *QueryEpidemicCaseByPatientResponse
	if retval, err2 = p.handler.QueryEpidemicCaseByPatient(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryEpidemicCaseByPatient: "+err2.Error())
		oprot.WriteMessageBegin("QueryEpidemicCaseByPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryEpidemicCaseByPatient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EpidemicServiceAddEpidemicCaseArgs struct {
	Req *AddEpidemicCaseRequest `thrift:"req,1"`
}

func NewEpidemicServiceAddEpidemicCaseArgs() *EpidemicServiceAddEpidemicCaseArgs {
	return &EpidemicServiceAddEpidemicCaseArgs{}
}

func (p *EpidemicServiceAddEpidemicCaseArgs) InitDefault() {
}

var EpidemicServiceAddEpidemicCaseArgs_Req_DEFAULT *AddEpidemicCaseRequest

func (p *EpidemicServiceAddEpidemicCaseArgs) GetReq() (v *AddEpidemicCaseRequest) {
	if !p.IsSetReq() {
		return EpidemicServiceAddEpidemicCaseArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemicServiceAddEpidemicCaseArgs = map[int16]string{
	1: "req",
}

func (p *EpidemicServiceAddEpidemicCaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemicServiceAddEpidemicCaseArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceAddEpidemicCaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddEpidemicCaseRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemicServiceAddEpidemicCaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEpidemicCase_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceAddEpidemicCaseArgs(%+v)", *p)

}

type EpidemicServiceAddEpidemicCaseResult struct {
	Success *AddEpidemicCaseResponse `thrift:"success,0,optional"`
}

func NewEpidemicServiceAddEpidemicCaseResult() *EpidemicServiceAddEpidemicCaseResult {
	return &EpidemicServiceAddEpidemicCaseResult{}
}

func (p *EpidemicServiceAddEpidemicCaseResult) InitDefault() {
}

var EpidemicServiceAddEpidemicCaseResult_Success_DEFAULT *AddEpidemicCaseResponse

func (p *EpidemicServiceAddEpidemicCaseResult) GetSuccess() (v *AddEpidemicCaseResponse) {
	if !p.IsSetSuccess() {
		return EpidemicServiceAddEpidemicCaseResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemicServiceAddEpidemicCaseResult = map[int16]string{
	0: "success",
}

func (p *EpidemicServiceAddEpidemicCaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemicServiceAddEpidemicCaseResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceAddEpidemicCaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddEpidemicCaseResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemicServiceAddEpidemicCaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEpidemicCase_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemicServiceAddEpidemicCaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceAddEpidemicCaseResult(%+v)", *p)

}

type EpidemicServiceQueryEpidemicCaseByIdArgs struct {
	Req *QueryEpidemicCaseByIdRequest `thrift:"req,1"`
}

func NewEpidemicServiceQueryEpidemicCaseByIdArgs() *EpidemicServiceQueryEpidemicCaseByIdArgs {
	return &EpidemicServiceQueryEpidemicCaseByIdArgs{}
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) InitDefault() {
}

var EpidemicServiceQueryEpidemicCaseByIdArgs_Req_DEFAULT *QueryEpidemicCaseByIdRequest

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) GetReq() (v *QueryEpidemicCaseByIdRequest) {
	if !p.IsSetReq() {
		return EpidemicServiceQueryEpidemicCaseByIdArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemicServiceQueryEpidemicCaseByIdArgs = map[int16]string{
	1: "req",
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceQueryEpidemicCaseByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryEpidemicCaseByIdRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceQueryEpidemicCaseByIdArgs(%+v)", *p)

}

type EpidemicServiceQueryEpidemicCaseByIdResult struct {
	Success *QueryEpidemicCaseByIdResponse `thrift:"success,0,optional"`
}

func NewEpidemicServiceQueryEpidemicCaseByIdResult() *EpidemicServiceQueryEpidemicCaseByIdResult {
	return &EpidemicServiceQueryEpidemicCaseByIdResult{}
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) InitDefault() {
}

var EpidemicServiceQueryEpidemicCaseByIdResult_Success_DEFAULT *QueryEpidemicCaseByIdResponse

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) GetSuccess() (v *QueryEpidemicCaseByIdResponse) {
	if !p.IsSetSuccess() {
		return EpidemicServiceQueryEpidemicCaseByIdResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemicServiceQueryEpidemicCaseByIdResult = map[int16]string{
	0: "success",
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceQueryEpidemicCaseByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryEpidemicCaseByIdResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceQueryEpidemicCaseByIdResult(%+v)", *p)

}

type EpidemicServiceQueryEpidemicCaseByPatientArgs struct {
	Req *QueryEpidemicCaseByPatientRequest `thrift:"req,1"`
}

func NewEpidemicServiceQueryEpidemicCaseByPatientArgs() *EpidemicServiceQueryEpidemicCaseByPatientArgs {
	return &EpidemicServiceQueryEpidemicCaseByPatientArgs{}
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) InitDefault() {
}

var EpidemicServiceQueryEpidemicCaseByPatientArgs_Req_DEFAULT *QueryEpidemicCaseByPatientRequest

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) GetReq() (v *QueryEpidemicCaseByPatientRequest) {
	if !p.IsSetReq() {
		return EpidemicServiceQueryEpidemicCaseByPatientArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemicServiceQueryEpidemicCaseByPatientArgs = map[int16]string{
	1: "req",
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceQueryEpidemicCaseByPatientArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryEpidemicCaseByPatientRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByPatient_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceQueryEpidemicCaseByPatientArgs(%+v)", *p)

}

type EpidemicServiceQueryEpidemicCaseByPatientResult struct {
	Success *QueryEpidemicCaseByPatientResponse `thrift:"success,0,optional"`
}

func NewEpidemicServiceQueryEpidemicCaseByPatientResult() *EpidemicServiceQueryEpidemicCaseByPatientResult {
	return &EpidemicServiceQueryEpidemicCaseByPatientResult{}
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) InitDefault() {
}

var EpidemicServiceQueryEpidemicCaseByPatientResult_Success_DEFAULT *QueryEpidemicCaseByPatientResponse

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) GetSuccess() (v *QueryEpidemicCaseByPatientResponse) {
	if !p.IsSetSuccess() {
		return EpidemicServiceQueryEpidemicCaseByPatientResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemicServiceQueryEpidemicCaseByPatientResult = map[int16]string{
	0: "success",
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemicServiceQueryEpidemicCaseByPatientResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryEpidemicCaseByPatientResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEpidemicCaseByPatient_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemicServiceQueryEpidemicCaseByPatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemicServiceQueryEpidemicCaseByPatientResult(%+v)", *p)

}
