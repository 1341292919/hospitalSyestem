// Code generated by hertz generator.

package clinical

import (
	"Hospital/biz/pack"
	"Hospital/biz/service"
	"Hospital/pkg/errno"
	"context"

	clinical "Hospital/biz/model/clinical"
	"github.com/cloudwego/hertz/pkg/app"
)

// AddPatient .
// @router /clinical/patient/add [POST]
func AddPatient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req clinical.AddPatientRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(clinical.AddPatientResponse)
	err = service.NewClinicalService(ctx, c).CreatePatient(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// AddDiagnose .
// @router /clinical/diagnose/add [POST]
func AddDiagnose(ctx context.Context, c *app.RequestContext) {
	var err error
	var req clinical.AddDiagnoseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(clinical.AddDiagnoseResponse)
	err = service.NewClinicalService(ctx, c).CreateDiagnose(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// QueryCase .
// @router /clinical/case/info [GET]
func QueryCase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req clinical.QueryCaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(clinical.QueryCaseResponse)
	ClinicalResp, err := service.NewClinicalService(ctx, c).QueryMedicalCase(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Data = pack.Case(ClinicalResp)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}
