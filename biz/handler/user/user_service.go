// Code generated by hertz generator.

package user

import (
	"Hospital/biz/middleware/jwt"
	user "Hospital/biz/model/user"
	"Hospital/biz/pack"
	"Hospital/biz/service"
	"Hospital/pkg/errno"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
)

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}
	resp := new(user.LoginResponse)

	UserResp, err := service.NewUserService(ctx, c).Login(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	jwt.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	jwt.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	c.Header("Access-Token", c.GetString("Access-Token"))
	c.Header("Refresh-Token", c.GetString("Refresh-Token"))

	resp.Data = pack.User(UserResp)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// NewUser .
// @router /user/add [POST]
func NewUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.NewUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(user.NewUserResponse)
	UserResp, err := service.NewUserService(ctx, c).NewUser(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Data = pack.User(UserResp)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// UpdateDoctor .
// @router /user/doctor/upadate [PUT]
func UpdateDoctor(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateDoctorMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(user.UpdateDoctorMessageResponse)
	err = service.NewUserService(ctx, c).UpdateDoctor(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// UpdateNurse .
// @router /user/nurse/upadate [PUT]
func UpdateNurse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateNurseMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(user.UpdateNurseMessageResponse)
	err = service.NewUserService(ctx, c).UpdateNurse(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// Query .
// @router /user/info [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(user.QueryUserResponse)
	UserResp, err := service.NewUserService(ctx, c).QueryUser(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Data = pack.User(UserResp)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// QueryUserList .
// @router /user/admin/list [GET]
func QueryUserList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(user.QueryUserListResponse)

	userListResp, err := service.NewUserService(ctx, c).QueryUserList(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}

	resp.Base = pack.BuildBaseResp(errno.Success)
	resp.Data = pack.UserList(userListResp)
	pack.SendResponse(c, resp)
}
