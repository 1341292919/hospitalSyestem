// Code generated by hertz generator.

package biobank

import (
	biobank "Hospital/biz/model/biobank"
	"Hospital/biz/pack"
	"Hospital/biz/service"
	"Hospital/pkg/errno"
	"context"

	"github.com/cloudwego/hertz/pkg/app"
)

// AddSample .
// @router /sample/add [POST]
func AddSample(ctx context.Context, c *app.RequestContext) {
	var err error
	var req biobank.AddSampleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(biobank.AddSampleResponse)
	err = service.NewBioBankService(ctx, c).NewSample(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// QuerySampleById .
// @router /sample/info [POST]
func QuerySampleById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req biobank.QuerySampleByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(biobank.QuerySampleByIdResponse)
	s, count, err := service.NewBioBankService(ctx, c).QuerySampleById(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Data = pack.BioSampleList(s, count)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// QuerySampleByPatient .
// @router /sample/info/patient [POST]
func QuerySampleByPatient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req biobank.QuerySampleByPatientRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.NewErrNo(errno.ParamMissingErrorCode, "param missing:"+err.Error()))
		return
	}

	resp := new(biobank.QuerySampleByPatientResponse)
	s, count, err := service.NewBioBankService(ctx, c).QuerySampleByPatient(&req)
	if err != nil {
		pack.SendFailResponse(c, errno.ConvertErr(err))
		return
	}
	resp.Data = pack.BioSampleList(s, count)
	resp.Base = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}
